{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Development\\\\superm-solution-react-18\\\\src\\\\AppContext.js\",\n    _s = $RefreshSig$();\n\nimport { useState, createContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\n\nfunction AppProvider(props) {\n  _s();\n\n  const [cart, setCart] = useState(function () {\n    let savedCart = [];\n\n    try {\n      savedCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n    } catch (error) {\n      savedCart = [];\n    }\n\n    return savedCart;\n  });\n  useEffect(() => {\n    if (cart) {\n      localStorage.setItem(\"cart\", JSON.stringify(cart));\n    }\n  }, [cart]);\n\n  function handleProductDelete(id) {\n    const updatedCart = cart.filter(product => product.id !== id);\n    setCart(updatedCart);\n  }\n\n  function handleProductAdd(newProduct) {\n    // check if item exists\n    const existingProduct = cart.find(product => product.id === newProduct.id);\n\n    if (existingProduct) {\n      // increase quantity\n      const updatedCart = cart.map(product => {\n        if (product.id === newProduct.id) {\n          return { ...product,\n            quantity: product.quantity + 1\n          };\n        }\n\n        return product;\n      });\n      setCart(updatedCart);\n    } else {\n      // product is new to the cart\n      setCart([...cart, { ...newProduct,\n        quantity: 1\n      }]);\n    }\n  }\n\n  const value = {\n    cart,\n    onProductAdd: handleProductAdd,\n    onProductDelete: handleProductDelete\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 12\n  }, this);\n}\n\n_s(AppProvider, \"wOxw4OKbFVAECZd0xN75xUFdQA8=\");\n\n_c = AppProvider;\nexport {};\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["D:/Web Development/superm-solution-react-18/src/AppContext.js"],"names":["useState","createContext","useEffect","AppContext","AppProvider","props","cart","setCart","savedCart","JSON","parse","localStorage","getItem","error","setItem","stringify","handleProductDelete","id","updatedCart","filter","product","handleProductAdd","newProduct","existingProduct","find","map","quantity","value","onProductAdd","onProductDelete","children"],"mappings":";;;AAAA,SAAQA,QAAR,EAAiBC,aAAjB,EAAgCC,SAAhC,QAAgD,OAAhD;;AAGA,MAAMC,UAAU,gBAAGF,aAAa,EAAhC;;AAEA,SAASG,WAAT,CAAqBC,KAArB,EAA2B;AAAA;;AAEvB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,YAAY;AACzC,QAAIQ,SAAS,GAAG,EAAhB;;AACA,QAAI;AACFA,MAAAA,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,KAA4C,EAAxD;AACD,KAFD,CAEE,OAAOC,KAAP,EAAc;AACdL,MAAAA,SAAS,GAAG,EAAZ;AACD;;AACD,WAAOA,SAAP;AACD,GAR6B,CAAhC;AAUEN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,IAAJ,EAAU;AACRK,MAAAA,YAAY,CAACG,OAAb,CAAqB,MAArB,EAA6BL,IAAI,CAACM,SAAL,CAAeT,IAAf,CAA7B;AACD;AACF,GAJQ,EAIN,CAACA,IAAD,CAJM,CAAT;;AAMA,WAASU,mBAAT,CAA6BC,EAA7B,EAAiC;AAC/B,UAAMC,WAAW,GAAGZ,IAAI,CAACa,MAAL,CAAaC,OAAD,IAAaA,OAAO,CAACH,EAAR,KAAeA,EAAxC,CAApB;AACAV,IAAAA,OAAO,CAACW,WAAD,CAAP;AACD;;AAED,WAASG,gBAAT,CAA0BC,UAA1B,EAAsC;AACpC;AACA,UAAMC,eAAe,GAAGjB,IAAI,CAACkB,IAAL,CACrBJ,OAAD,IAAaA,OAAO,CAACH,EAAR,KAAeK,UAAU,CAACL,EADjB,CAAxB;;AAGA,QAAIM,eAAJ,EAAqB;AACnB;AACA,YAAML,WAAW,GAAGZ,IAAI,CAACmB,GAAL,CAAUL,OAAD,IAAa;AACxC,YAAIA,OAAO,CAACH,EAAR,KAAeK,UAAU,CAACL,EAA9B,EAAkC;AAChC,iBAAO,EACL,GAAGG,OADE;AAELM,YAAAA,QAAQ,EAAEN,OAAO,CAACM,QAAR,GAAmB;AAFxB,WAAP;AAID;;AACD,eAAON,OAAP;AACD,OARmB,CAApB;AASAb,MAAAA,OAAO,CAACW,WAAD,CAAP;AACD,KAZD,MAYO;AACL;AACAX,MAAAA,OAAO,CAAC,CACN,GAAGD,IADG,EAEN,EACE,GAAGgB,UADL;AAEEI,QAAAA,QAAQ,EAAE;AAFZ,OAFM,CAAD,CAAP;AAOD;AACF;;AACH,QAAMC,KAAK,GAAG;AACVrB,IAAAA,IADU;AAEVsB,IAAAA,YAAY,EAAEP,gBAFJ;AAGVQ,IAAAA,eAAe,EAACb;AAHN,GAAd;AAMA,sBAAO,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAIW,KAA9B;AAAA,cAAsCtB,KAAK,CAACyB;AAA5C;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;GA1DQ1B,W;;KAAAA,W;AA4DT","sourcesContent":["import {useState,createContext, useEffect} from 'react';\r\n\r\n\r\nconst AppContext = createContext();\r\n\r\nfunction AppProvider(props){\r\n\r\n    const [cart, setCart] = useState(function () {\r\n        let savedCart = [];\r\n        try {\r\n          savedCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\r\n        } catch (error) {\r\n          savedCart = [];\r\n        }\r\n        return savedCart;\r\n      });\r\n    \r\n      useEffect(() => {\r\n        if (cart) {\r\n          localStorage.setItem(\"cart\", JSON.stringify(cart));\r\n        }\r\n      }, [cart]);\r\n    \r\n      function handleProductDelete(id) {\r\n        const updatedCart = cart.filter((product) => product.id !== id);\r\n        setCart(updatedCart);\r\n      }\r\n    \r\n      function handleProductAdd(newProduct) {\r\n        // check if item exists\r\n        const existingProduct = cart.find(\r\n          (product) => product.id === newProduct.id\r\n        );\r\n        if (existingProduct) {\r\n          // increase quantity\r\n          const updatedCart = cart.map((product) => {\r\n            if (product.id === newProduct.id) {\r\n              return {\r\n                ...product,\r\n                quantity: product.quantity + 1,\r\n              };\r\n            }\r\n            return product;\r\n          });\r\n          setCart(updatedCart);\r\n        } else {\r\n          // product is new to the cart\r\n          setCart([\r\n            ...cart,\r\n            {\r\n              ...newProduct,\r\n              quantity: 1,\r\n            },\r\n          ]);\r\n        }\r\n      }\r\n    const value = {\r\n        cart,\r\n        onProductAdd: handleProductAdd,\r\n        onProductDelete:handleProductDelete\r\n    };\r\n\r\n    return <AppContext.Provider value = {value}>{props.children}</AppContext.Provider>\r\n}\r\n\r\nexport {}"]},"metadata":{},"sourceType":"module"}