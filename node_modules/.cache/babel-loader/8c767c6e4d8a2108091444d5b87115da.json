{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst cart = useSelector(state => state.cart);\nlet savedCart = [];\n\ntry {\n  savedCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n} catch (error) {\n  savedCart = [];\n}\n\nconst dispatch = useDispatch();\nsavedCart.map(product => {\n  dispatch(addProduct(product));\n});\nuseEffect(() => {\n  if (cart) {\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n  }\n}, [cart]);\nconst initialState = {\n  cart: []\n}; // adding cart State \n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addProduct: (state, action) => {\n      // check if the product exists\n      const {\n        cart\n      } = state;\n      const productExists = cart.find(product => {\n        return product.id === action.payload.id;\n      });\n\n      if (productExists) {\n        const updatedCart = cart.map(product => {\n          if (product.id === action.payload.id) {\n            return { ...product,\n              quantity: product.quantity + 1\n            };\n          }\n\n          return product;\n        });\n        state.cart = updatedCart;\n      } else {\n        const updatedCart = [...cart, { ...action.payload,\n          quantity: 1\n        }];\n        state.cart = updatedCart;\n      }\n\n      return state;\n    },\n    removeProduct: (state, action) => {\n      const {\n        cart\n      } = state;\n      const updatedCart = cart.filter(product => {\n        return product.id !== action.payload;\n      });\n      state.cart = updatedCart;\n      return state;\n    }\n  }\n});\nconst {\n  addProduct,\n  removeProduct\n} = cartSlice.actions;\n\nconst cartCountSelector = state => {\n  // this function returns total number of items in the cart\n  // This means 4 milk, 2 cheese will give 6 as output\n  const {\n    cart\n  } = state;\n  const totalItems = cart.reduce((prev, curr) => {\n    const totalTillNow = prev + curr.quantity;\n    return totalTillNow;\n  }, 0);\n  return totalItems;\n};\n\nconst cartValueSelector = state => {\n  // this function will return the total bill amount of our cart\n  const {\n    cart\n  } = state;\n  const totalAmount = cart.reduce((prev, curr) => {\n    const totalAmountTillNow = prev + curr.quantity * curr.price;\n    return totalAmountTillNow;\n  }, 0);\n  return totalAmount;\n};\n\nexport { addProduct, removeProduct, cartCountSelector, cartValueSelector, cartSlice };","map":{"version":3,"sources":["D:/Web Development/superm-solution-react-18/src/Features/cartSlice.js"],"names":["createSlice","cart","useSelector","state","savedCart","JSON","parse","localStorage","getItem","error","dispatch","useDispatch","map","product","addProduct","useEffect","setItem","stringify","initialState","cartSlice","name","reducers","action","productExists","find","id","payload","updatedCart","quantity","removeProduct","filter","actions","cartCountSelector","totalItems","reduce","prev","curr","totalTillNow","cartValueSelector","totalAmount","totalAmountTillNow","price"],"mappings":"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","sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\r\n\r\n\r\nconst cart = useSelector(state => state.cart);\r\n\r\nlet savedCart = [];\r\ntry{\r\n    savedCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\r\n}catch(error){\r\n    savedCart = [];\r\n}\r\n\r\n\r\nconst dispatch = useDispatch();\r\n\r\nsavedCart.map(product => {\r\n  dispatch(addProduct(product))\r\n})\r\n\r\n\r\nuseEffect(() => {\r\n  if (cart) {\r\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\r\n  }\r\n}, [cart]);\r\n\r\n\r\nconst initialState = {\r\n    cart : []\r\n}\r\n\r\n// adding cart State \r\nconst cartSlice = createSlice({\r\n    name : 'cart',\r\n    initialState,\r\n    reducers : {\r\n        addProduct : (state,action) => {\r\n            // check if the product exists\r\n\r\n            const {cart} = state;\r\n\r\n            const productExists = cart.find(product =>{\r\n                return product.id === action.payload.id\r\n            });\r\n\r\n            if(productExists){\r\n                const updatedCart = cart.map(product =>{\r\n                    if(product.id === action.payload.id){\r\n                        return {\r\n                            ...product,\r\n                            quantity:product.quantity +1\r\n                        }\r\n                    }\r\n\r\n                    return product;\r\n                })\r\n\r\n                state.cart = updatedCart\r\n            }else{\r\n                const updatedCart = [...cart, {\r\n                    ...action.payload,\r\n                    quantity :1\r\n                }];\r\n\r\n                state.cart = updatedCart\r\n            }\r\n\r\n            return state;\r\n\r\n        },\r\n        removeProduct : (state, action ) => {\r\n            const {cart} = state;\r\n            const updatedCart = cart.filter(product => {\r\n                return product.id !== action.payload\r\n            });\r\n\r\n            state.cart = updatedCart;\r\n\r\n            return state;\r\n        }\r\n    }\r\n})\r\n\r\nconst {addProduct, removeProduct} = cartSlice.actions;\r\n\r\nconst cartCountSelector = (state) => {\r\n    // this function returns total number of items in the cart\r\n    // This means 4 milk, 2 cheese will give 6 as output\r\n\r\n    const {cart} = state;\r\n\r\n    const totalItems = cart.reduce((prev, curr) => {\r\n        const totalTillNow = prev + curr.quantity;\r\n        return totalTillNow;\r\n    }, 0);\r\n\r\n    return totalItems;\r\n}\r\n\r\n\r\nconst cartValueSelector = (state) => {\r\n    // this function will return the total bill amount of our cart\r\n    const {cart} = state;\r\n\r\n    const totalAmount = cart.reduce((prev, curr) => {\r\n        const totalAmountTillNow = prev + (curr.quantity * curr.price);\r\n        return totalAmountTillNow;\r\n    }, 0);\r\n\r\n    return totalAmount\r\n\r\n}\r\n\r\n\r\nexport {addProduct,\r\n     removeProduct,\r\n     cartCountSelector,\r\n     cartValueSelector,\r\n      cartSlice}"]},"metadata":{},"sourceType":"module"}